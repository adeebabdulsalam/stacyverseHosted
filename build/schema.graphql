
# General Entities:  referenced from any handler
type Account @entity {
  "Wallet Address"
  id: ID!
  transfersFrom: [Transfer!]! @derivedFrom(field: "senderAddress")
  transfersTo: [Transfer!]! @derivedFrom(field: "receiverAddress")
  balances: [Balance!] @derivedFrom(field: "account")
  isHalloweenTraded: Boolean!
}

# All collection is a contract, All contract need not be a collection
type Collection @entity {
  "contract Address"
  id: ID!
  name: String
  symbol: String
  creator: String
}

# Token Entities 
type Token @entity{
  "mainnet/collectionAddr/tokenId"
  id: ID!
  collection: Collection!
  identifier: BigInt!
  uri: String
  metadata: String
  isHalloweenTradeable: Boolean!
  transfers: [Transfer!]! @derivedFrom(field: "token")
  balances: [Balance!]! @derivedFrom(field: "token")
}

type Transfer @entity(immutable: true){
  id: ID!
  transaction: Transaction!
  collection: Collection!
  token: Token!
  operator: Account
  senderAddress: Account!
  receiverAddress: Account!
  value: BigInt!
}

type Balance @entity {
  "mainnet/collectionAddr/tokenId/walletAddress"
  id: ID!
  token: Token!
  account: Account!
  value: BigInt!
}

type Transaction @entity(immutable: true){
  id: ID!
  timestamp: Int!
  blockNumber: Int!
  transactionFrom: Account!
  # Not deriving because of some loop, subgraph deployment fails
  transfers: [Transfer!]!
  gasPrice: BigInt
}